datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String
  role         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  stores       Store[]
  invoices     Invoice[]
  approvals    Approval[]
}

model Store {
  id            String    @id @default(cuid())
  name          String
  address       String?
  phone         String?
  region        String?
  currency      String    @default("USD")
  isMainBranch  Boolean   @default(false)
  status        String    @default("active")
  taxSettings   Json?
  invoicePrefix String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  products      Product[]
  inventory     Inventory[]
  invoices      Invoice[]
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  sku          String        @unique
  price        Float
  cost         Float?
  category     String?
  brand        String?
  supplier     String?
  reorderPoint Int?
  tax          Float?
  images       String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  store        Store         @relation(fields: [storeId], references: [id])
  storeId      String
  inventory   Inventory[]
  invoiceItems InvoiceItem[]
}

model Inventory {
  id          String    @id @default(cuid())
  quantity    Int
  minQuantity Int       @default(0)
  location    String?
  lastUpdated DateTime  @default(now())
  batchNumber String?
  expiryDate  DateTime?
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String
}

model Client {
  id            String          @id @default(cuid())
  name          String
  email         String?
  phone         String?
  taxId         String?
  creditLimit   Float?
  currency      String          @default("USD")
  billingAddress String?
  status        String          @default("active")
  invoices      Invoice[]
  recurringBills RecurringBill[]
}

model Invoice {
  id            String        @id @default(cuid())
  number        String        @unique
  type          String        // retail, wholesale, tax
  storeId       String
  store         Store         @relation(fields: [storeId], references: [id])
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  status        String        @default("draft")
  currency      String
  subtotal      Float
  tax           Float
  total         Float
  dueDate       DateTime
  items         InvoiceItem[]
  payments      Payment[]
  approvals     Approval[]
  customFields  Json?
  templateId    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  discount    Float    @default(0)
  tax         Float    @default(0)
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  amount      Float
  method      String
  status      String
  gatewayRef  String?
  createdAt   DateTime @default(now())
}

model RecurringBill {
  id          String   @id @default(cuid())
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  frequency   String   // monthly, quarterly, yearly
  nextDueDate DateTime
  template    Json
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Approval {
  id         String   @id @default(cuid())
  invoiceId  String
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  status     String   @default("pending")
  comment    String?
  createdAt  DateTime @default(now())
}

model InvoiceTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String   // retail, wholesale, tax
  layout    Json
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}