generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id       String @id @default(cuid())
  name     String
  location String
  status   String @default("active")
}

model Customer {
  id              String   @id @default(cuid())
  name            String
  email           String?
  phone           String?
  address         String?
  detailsStatus   String   @default("pending_details") // pending_details, verified, incomplete
  verifiedBy      String?  // Admin who verified the details
  verifiedAt      DateTime?
  requiredFields  Json?    // List of missing required fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Product {
  id              String            @id @default(cuid())
  name            String
  sku             String            @unique
  description     String?           @db.Text
  price           Float
  stock           Int              @default(0)
  minStock        Int              @default(5)
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      String
  brand           Brand             @relation(fields: [brandId], references: [id])
  brandId         String
  attributes      ProductAttribute[]
  variations      ProductVariation[]
  images          ProductImage[]
  warehouse       String?
  taxClass        String?
  metaTitle       String?
  metaDescription String?          @db.Text
  relatedProducts Product[]        @relation("ProductRelations")
  relatedTo       Product[]        @relation("ProductRelations")
  customFields    Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProductAttribute {
  id        String   @id @default(cuid())
  name      String
  value     String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model ProductVariation {
  id        String   @id @default(cuid())
  sku       String   @unique
  price     Float
  stock     Int      @default(0)
  color     String?
  size      String?
  material  String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?    @db.Text
  products    Product[]
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryHierarchy")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  logo        String?
  products    Product[]
}

model Invoice {
  id         String   @id @default(cuid())
  customerId String
  storeId    String
  total      Float
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Budget {
  id          String   @id @default(cuid())
  category    String
  amount      Float
  period      String
  startDate   DateTime
  endDate     DateTime
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaxSetting {
  id          String   @id @default(cuid())
  name        String
  percentage  Float
  isDefault   Boolean  @default(false)
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  name      String
  type      String
  content   String   @db.Text
  language  String
  version   Int      @default(1)
  watermark String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
}