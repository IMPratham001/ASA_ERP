The application is currently unstable — it's frequently crashing and key features are non-functional. I want you to act as a full-stack code reviewer and fixer.

➡️ Carefully analyze the **entire codebase** (frontend, backend, and database layer) and perform the following steps:

1. ✅ **Dependency Check & Environment Validation:**
   - Ensure all required dependencies for Next.js, Laravel, Prisma, and PostgreSQL are properly installed.
   - Validate `.env` files in both frontend and backend. Check DB connection strings, ports, and URLs.
   - Ensure `composer`, `npm`, `artisan`, `php`, and `prisma` commands are configured correctly.

2. 🔍 **Code Audit:**
   - Check each code file (Next.js pages, API routes, Laravel controllers, models, routes, migrations, Prisma schema, etc.).
   - Identify and fix **syntax errors**, **logical flaws**, **broken functions**, and **API misconfigurations**.
   - Validate that API calls from the frontend correctly match the backend route definitions (and Laravel route middlewares).

3. 🧹 **Clean-Up:**
   - Identify and delete unused files, leftover boilerplate, unnecessary logs, or dead code that may affect performance or clarity.
   - Remove duplicate logic or inconsistent folder structure (if any).

4. 🔧 **Fix & Enhance:**
   - Rewrite broken functions or queries.
   - Ensure Prisma is syncing correctly with PostgreSQL (i.e., `prisma migrate`, `prisma generate` are run and configured).
   - Fix Laravel DB models if they conflict with Prisma or migration logic.
   - Check if database schema and Prisma schema are aligned and compatible.

5. 🚀 **Stability and Testing:**
   - Make sure the app runs smoothly in local dev mode (`npm run dev`, `php artisan serve`) with correct ports and hot reloading.
   - Ensure basic features like authentication, dashboard, and CRUD operations are functional.
   - If required, add basic try-catch blocks, error handlers, and proper response formats (especially for Laravel API responses).

6. 📦 **Final Sanity Check:**
   - Provide logs of key issues and fixes.
   - Suggest folder structure improvements and best practices (e.g., splitting service layers, centralized error handling, shared types/interfaces, etc.).

📍 Note:
This is a production-level business ERP, so be strict and thorough. Performance, maintainability, and scalability are priorities.