 1. Yes. Custom fields are essential. The customer model should support dynamic field creation (e.g., text, number, date, select). These fields should be configurable per tenant/account and appear in forms, views, and exports.

Yes. Full RBAC is required. Common roles include:

Admin (full access)

Manager (restricted to business operations)

Accountant (financials only)

Sales Executive (customer + invoice view only)

The system should also allow custom roles with granular permissions, like create/view/edit/delete per module.

 Absolutely. The system must support multiple tax schemes:

GST (India): CGST, SGST, IGST

VAT (EU) and other country-specific formats

Compound or cascading taxes

Option to set tax per item, per invoice, or based on customer location

2. Start with 3 professionally designed templates:

Classic (clean corporate style)

Modern (flat design with color branding)

Minimal (lightweight, print-optimized)

Should allow future expansion with custom HTML/CSS template editing and creation of custom template like zoho

 Yes. For flexibility across use cases (e.g., services, retail, manufacturing), the invoice module should:

Support industry-specific custom fields like:

"HSN/SAC Code"

"Service Period"

"Project Code"

Be customizable per account or sector

 Yes, for regulatory compliance and professional presentation.
Allow users to:

Upload and embed signature images

3.Yes, especially for high-value or perishable items.
Allow both:

Batch tracking (with expiry dates)

Serial number tracking (for individual item traceability)

Yes. The system should support:

Multiple warehouses or stock points

Inter-location stock transfers

Per-location stock valuation and stock levels
 Yes. Inventory should support:

Min & max thresholds

Auto-generation of reorder alerts

4. Support all major international currencies at launch:

INR, USD, EUR, GBP, AED, AUD, SGD

Add-on: Allow custom currency addition per tenant
 Integrate with a real-time exchange rate API (e.g., OpenExchangeRates or Forex API) with a fallback cache.

For accurate financial records and compliance.
Store timestamped exchange rates per transaction and allow manual override where needed.

5âœ… Prefer a hybrid model:

SSR (Server-side rendering) for initial load (Next.js)

CSR (Client-side rendering) for dashboards, live updates, and fluid UX

Yes. Real-time updates via WebSockets or Pusher/Socket.io for:

Inventory changes

Order status updates

New payments or low-stock alerts

6. Yes. Integrate with:

Razorpay, Stripe, PayPal initially

Offer callback handling, auto-receipt generation, and payment link support

Yes. Export to : csv, pdf , etc...

Use standard accounting export formats with ledger mapping

 Yes. Full REST API (with optional GraphQL) for:

