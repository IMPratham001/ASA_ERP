
Failed to compile
./app/(billing)/create-invoice/page.tsx
Error: 
  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:1:1]
   1 │ "use client";
   2 │ 
   3 │ import { useState } from "react";
     ·          ────┬───
     ·              ╰── previous definition of `useState` here
   4 │ import { useForm } from "react-hook-form";
   5 │ import { zodResolver } from "@hookform/resolvers/zod";
   6 │ import * as z from "zod";
   7 │ import { useStore } from "@/lib/store/store";
   8 │ import { Button } from "@/components/ui/button";
   9 │ import { Input } from "@/components/ui/input";
  10 │ import {
  11 │   Form,
  12 │   FormControl,
  13 │   FormField,
  14 │   FormItem,
  15 │   FormLabel,
  16 │   FormMessage,
  17 │ } from "@/components/ui/form";
  18 │ import {
  19 │   Select,
  20 │   SelectContent,
  21 │   SelectItem,
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
     ·          ────┬───
     ·              ╰── `useState` redefined here
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
     ╰────

  × the name `Card` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:22:1]
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·          ──┬─
     ·            ╰── previous definition of `Card` here
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·          ──┬─
     ·            ╰── `Card` redefined here
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
     ╰────

  × the name `CardContent` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:22:1]
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·                ─────┬─────
     ·                     ╰── previous definition of `CardContent` here
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·                ─────┬─────
     ·                     ╰── `CardContent` redefined here
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
     ╰────

  × the name `CardHeader` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:22:1]
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·                             ─────┬────
     ·                                  ╰── previous definition of `CardHeader` here
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·                             ─────┬────
     ·                                  ╰── `CardHeader` redefined here
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
     ╰────

  × the name `CardTitle` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:22:1]
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·                                         ────┬────
     ·                                             ╰── previous definition of `CardTitle` here
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ·                                         ────┬────
     ·                                             ╰── `CardTitle` redefined here
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
     ╰────

  × the name `Input` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:6:1]
   6 │ import * as z from "zod";
   7 │ import { useStore } from "@/lib/store/store";
   8 │ import { Button } from "@/components/ui/button";
   9 │ import { Input } from "@/components/ui/input";
     ·          ──┬──
     ·            ╰── previous definition of `Input` here
  10 │ import {
  11 │   Form,
  12 │   FormControl,
  13 │   FormField,
  14 │   FormItem,
  15 │   FormLabel,
  16 │   FormMessage,
  17 │ } from "@/components/ui/form";
  18 │ import {
  19 │   Select,
  20 │   SelectContent,
  21 │   SelectItem,
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
     ·          ──┬──
     ·            ╰── `Input` redefined here
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
 239 │ import { ProductTable } from "@/components/billing/product-table";
     ╰────

  × the name `Button` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:5:1]
   5 │ import { zodResolver } from "@hookform/resolvers/zod";
   6 │ import * as z from "zod";
   7 │ import { useStore } from "@/lib/store/store";
   8 │ import { Button } from "@/components/ui/button";
     ·          ───┬──
     ·             ╰── previous definition of `Button` here
   9 │ import { Input } from "@/components/ui/input";
  10 │ import {
  11 │   Form,
  12 │   FormControl,
  13 │   FormField,
  14 │   FormItem,
  15 │   FormLabel,
  16 │   FormMessage,
  17 │ } from "@/components/ui/form";
  18 │ import {
  19 │   Select,
  20 │   SelectContent,
  21 │   SelectItem,
  22 │   SelectTrigger,
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
     ·          ───┬──
     ·             ╰── `Button` redefined here
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
 239 │ import { ProductTable } from "@/components/billing/product-table";
 240 │ import { StoreSelect } from "@/components/billing/store-select";
     ╰────

  × the name `CustomerSelect` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:23:1]
  23 │   SelectValue,
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
     ·          ───────┬──────
     ·                 ╰── previous definition of `CustomerSelect` here
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
     ·          ───────┬──────
     ·                 ╰── `CustomerSelect` redefined here
 239 │ import { ProductTable } from "@/components/billing/product-table";
 240 │ import { StoreSelect } from "@/components/billing/store-select";
 241 │ import { QrCode, Save, Printer } from "lucide-react";
     ╰────

  × the name `ProductTable` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:24:1]
  24 │ } from "@/components/ui/select";
  25 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
     ·          ──────┬─────
     ·                ╰── previous definition of `ProductTable` here
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
 239 │ import { ProductTable } from "@/components/billing/product-table";
     ·          ──────┬─────
     ·                ╰── `ProductTable` redefined here
 240 │ import { StoreSelect } from "@/components/billing/store-select";
 241 │ import { QrCode, Save, Printer } from "lucide-react";
 242 │ import QRCode from 'qrcode.react';
     ╰────

  × the name `StoreSelect` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:26:1]
  26 │ import { CustomerSelect } from "@/components/billing/customer-select";
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
     ·          ─────┬─────
     ·               ╰── previous definition of `StoreSelect` here
  30 │ import { PrinterIcon, Save } from "lucide-react";
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
 239 │ import { ProductTable } from "@/components/billing/product-table";
 240 │ import { StoreSelect } from "@/components/billing/store-select";
     ·          ─────┬─────
     ·               ╰── `StoreSelect` redefined here
 241 │ import { QrCode, Save, Printer } from "lucide-react";
 242 │ import QRCode from 'qrcode.react';
     ╰────

  × the name `Save` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:27:1]
  27 │ import { ProductTable } from "@/components/billing/product-table";
  28 │ import { InvoiceSummary } from "@/components/billing/invoice-summary";
  29 │ import { StoreSelect } from "@/components/billing/store-select";
  30 │ import { PrinterIcon, Save } from "lucide-react";
     ·                       ──┬─
     ·                         ╰── previous definition of `Save` here
  31 │ 
  32 │ const formSchema = z.object({
  33 │   invoiceType: z.enum(["retail", "wholesale", "tax"]),
  34 │   templateId: z.string(),
  35 │   customerId: z.string(),
  36 │   storeId: z.string(),
  37 │   currency: z.string().default("USD"),
  38 │   paymentMode: z.enum(["cash", "upi", "card", "credit", "razorpay"]),
  39 │   dueDate: z.date(),
  40 │   isRecurring: z.boolean().default(false),
  41 │   recurringFrequency: z.enum(["monthly", "quarterly", "yearly"]).optional(),
  42 │   approvalRequired: z.boolean().default(false),
  43 │   customFields: z.record(z.string()).default({}),
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
 239 │ import { ProductTable } from "@/components/billing/product-table";
 240 │ import { StoreSelect } from "@/components/billing/store-select";
 241 │ import { QrCode, Save, Printer } from "lucide-react";
     ·                  ──┬─
     ·                    ╰── `Save` redefined here
 242 │ import QRCode from 'qrcode.react';
 243 │ 
 244 │ export default function CreateInvoicePage() {
     ╰────

  × the name `CreateInvoicePage` is defined multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:44:1]
  44 │   note: z.string().optional(),
  45 │ });
  46 │ 
  47 │ export default function CreateInvoicePage() {
     ·                         ────────┬────────
     ·                                 ╰── previous definition of `CreateInvoicePage` here
  48 │   const { user } = useStore();
  49 │   const [items, setItems] = useState([]);
  50 │ 
  51 │   const form = useForm({
  52 │     resolver: zodResolver(formSchema),
  53 │     defaultValues: {
  54 │       invoiceType: "retail",
  55 │       note: "",
  56 │     },
  57 │   });
  58 │ 
  59 │   const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │     try {
  61 │       const validatedData = formSchema.parse(values);
  62 │       
  63 │       if (items.length === 0) {
  64 │         throw new Error("Please add at least one item to the invoice");
  65 │       }
  66 │ 
  67 │       const invoiceData = {
  68 │         customer_id: validatedData.customerId,
  69 │         due_date: validatedData.dueDate,
  70 │         notes: validatedData.note,
  71 │         items: items.map(item => ({
  72 │           product_id: item.productId,
  73 │           quantity: item.quantity,
  74 │           price: item.price,
  75 │           discount: item.discount || 0,
  76 │           tax: item.tax || 0
  77 │         }))
  78 │       };
  79 │ 
  80 │       const response = await invoices.create(invoiceData);
  81 │       
  82 │       toast({
  83 │         title: "Success",
  84 │         description: "Invoice created successfully",
  85 │       });
  86 │ 
  87 │       router.push(`/invoices/${response.invoice.id}`);
  88 │       
  89 │     } catch (error) {
  90 │       console.error("Form submission error:", error);
  91 │       // Show error toast
  92 │       toast({
  93 │         title: "Error",
  94 │         description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │         variant: "destructive"
  96 │       });
  97 │     }
  98 │   };
  99 │ 
 100 │   return (
 101 │     <div className="space-y-6">
 102 │       <div className="flex items-center justify-between">
 103 │         <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │         <div className="flex gap-2">
 105 │           <Button variant="outline" onClick={() => form.reset()}>
 106 │             Clear
 107 │           </Button>
 108 │           <Button variant="outline">
 109 │             <PrinterIcon className="mr-2 h-4 w-4" />
 110 │             Print Preview
 111 │           </Button>
 112 │           <Button onClick={form.handleSubmit(onSubmit)}>
 113 │             <Save className="mr-2 h-4 w-4" />
 114 │             Save Invoice
 115 │           </Button>
 116 │         </div>
 117 │       </div>
 118 │ 
 119 │       <Form {...form}>
 120 │         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │           <Card>
 122 │             <CardHeader>
 123 │               <CardTitle>Invoice Details</CardTitle>
 124 │             </CardHeader>
 125 │             <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │               <FormField
 127 │                 control={form.control}
 128 │                 name="invoiceType"
 129 │                 render={({ field }) => (
 130 │                   <FormItem>
 131 │                     <FormLabel>Invoice Type</FormLabel>
 132 │                     <Select
 133 │                       onValueChange={field.onChange}
 134 │                       defaultValue={field.value}
 135 │                     >
 136 │                       <FormControl>
 137 │                         <SelectTrigger>
 138 │                           <SelectValue placeholder="Select type" />
 139 │                         </SelectTrigger>
 140 │                       </FormControl>
 141 │                       <SelectContent>
 142 │                         <SelectItem value="retail">Retail</SelectItem>
 143 │                         <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │                       </SelectContent>
 145 │                     </Select>
 146 │                     <FormMessage />
 147 │                   </FormItem>
 148 │                 )}
 149 │               />
 150 │ 
 151 │               <FormField
 152 │                 control={form.control}
 153 │                 name="storeId"
 154 │                 render={({ field }) => (
 155 │                   <FormItem>
 156 │                     <FormLabel>Store</FormLabel>
 157 │                     <StoreSelect
 158 │                       value={field.value}
 159 │                       onChange={field.onChange}
 160 │                       disabled={user?.role !== "super_admin"}
 161 │                     />
 162 │                     <FormMessage />
 163 │                   </FormItem>
 164 │                 )}
 165 │               />
 166 │ 
 167 │               <FormField
 168 │                 control={form.control}
 169 │                 name="customerId"
 170 │                 render={({ field }) => (
 171 │                   <FormItem>
 172 │                     <FormLabel>Customer</FormLabel>
 173 │                     <CustomerSelect
 174 │                       value={field.value}
 175 │                       onChange={field.onChange}
 176 │                     />
 177 │                     <FormMessage />
 178 │                   </FormItem>
 179 │                 )}
 180 │               />
 181 │ 
 182 │               <FormField
 183 │                 control={form.control}
 184 │                 name="paymentMode"
 185 │                 render={({ field }) => (
 186 │                   <FormItem>
 187 │                     <FormLabel>Payment Mode</FormLabel>
 188 │                     <Select
 189 │                       onValueChange={field.onChange}
 190 │                       defaultValue={field.value}
 191 │                     >
 192 │                       <FormControl>
 193 │                         <SelectTrigger>
 194 │                           <SelectValue placeholder="Select payment mode" />
 195 │                         </SelectTrigger>
 196 │                       </FormControl>
 197 │                       <SelectContent>
 198 │                         <SelectItem value="cash">Cash</SelectItem>
 199 │                         <SelectItem value="upi">UPI</SelectItem>
 200 │                         <SelectItem value="card">Card</SelectItem>
 201 │                         <SelectItem value="credit">Credit</SelectItem>
 202 │                       </SelectContent>
 203 │                     </Select>
 204 │                     <FormMessage />
 205 │                   </FormItem>
 206 │                 )}
 207 │               />
 208 │ 
 209 │               <FormField
 210 │                 control={form.control}
 211 │                 name="note"
 212 │                 render={({ field }) => (
 213 │                   <FormItem className="col-span-full">
 214 │                     <FormLabel>Note</FormLabel>
 215 │                     <FormControl>
 216 │                       <Input {...field} placeholder="Add note (optional)" />
 217 │                     </FormControl>
 218 │                     <FormMessage />
 219 │                   </FormItem>
 220 │                 )}
 221 │               />
 222 │             </CardContent>
 223 │           </Card>
 224 │ 
 225 │           <ProductTable items={items} setItems={setItems} />
 226 │           <InvoiceSummary items={items} />
 227 │         </form>
 228 │       </Form>
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │ import { Input } from "@/components/ui/input";
 237 │ import { Button } from "@/components/ui/button";
 238 │ import { CustomerSelect } from "@/components/billing/customer-select";
 239 │ import { ProductTable } from "@/components/billing/product-table";
 240 │ import { StoreSelect } from "@/components/billing/store-select";
 241 │ import { QrCode, Save, Printer } from "lucide-react";
 242 │ import QRCode from 'qrcode.react';
 243 │ 
 244 │ export default function CreateInvoicePage() {
     ·                         ────────┬────────
     ·                                 ╰── `CreateInvoicePage` redefined here
 245 │   const [invoice, setInvoice] = useState({
 246 │     customerId: "",
 247 │     storeId: "",
     ╰────

  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:44:1]
  44 │       note: z.string().optional(),
  45 │     });
  46 │     
  47 │ ╭─▶ export default function CreateInvoicePage() {
  48 │ │     const { user } = useStore();
  49 │ │     const [items, setItems] = useState([]);
  50 │ │   
  51 │ │     const form = useForm({
  52 │ │       resolver: zodResolver(formSchema),
  53 │ │       defaultValues: {
  54 │ │         invoiceType: "retail",
  55 │ │         note: "",
  56 │ │       },
  57 │ │     });
  58 │ │   
  59 │ │     const onSubmit = async (values: z.infer<typeof formSchema>) => {
  60 │ │       try {
  61 │ │         const validatedData = formSchema.parse(values);
  62 │ │         
  63 │ │         if (items.length === 0) {
  64 │ │           throw new Error("Please add at least one item to the invoice");
  65 │ │         }
  66 │ │   
  67 │ │         const invoiceData = {
  68 │ │           customer_id: validatedData.customerId,
  69 │ │           due_date: validatedData.dueDate,
  70 │ │           notes: validatedData.note,
  71 │ │           items: items.map(item => ({
  72 │ │             product_id: item.productId,
  73 │ │             quantity: item.quantity,
  74 │ │             price: item.price,
  75 │ │             discount: item.discount || 0,
  76 │ │             tax: item.tax || 0
  77 │ │           }))
  78 │ │         };
  79 │ │   
  80 │ │         const response = await invoices.create(invoiceData);
  81 │ │         
  82 │ │         toast({
  83 │ │           title: "Success",
  84 │ │           description: "Invoice created successfully",
  85 │ │         });
  86 │ │   
  87 │ │         router.push(`/invoices/${response.invoice.id}`);
  88 │ │         
  89 │ │       } catch (error) {
  90 │ │         console.error("Form submission error:", error);
  91 │ │         // Show error toast
  92 │ │         toast({
  93 │ │           title: "Error",
  94 │ │           description: error instanceof Error ? error.message : "Failed to create invoice",
  95 │ │           variant: "destructive"
  96 │ │         });
  97 │ │       }
  98 │ │     };
  99 │ │   
 100 │ │     return (
 101 │ │       <div className="space-y-6">
 102 │ │         <div className="flex items-center justify-between">
 103 │ │           <h2 className="text-3xl font-bold tracking-tight">Create Invoice</h2>
 104 │ │           <div className="flex gap-2">
 105 │ │             <Button variant="outline" onClick={() => form.reset()}>
 106 │ │               Clear
 107 │ │             </Button>
 108 │ │             <Button variant="outline">
 109 │ │               <PrinterIcon className="mr-2 h-4 w-4" />
 110 │ │               Print Preview
 111 │ │             </Button>
 112 │ │             <Button onClick={form.handleSubmit(onSubmit)}>
 113 │ │               <Save className="mr-2 h-4 w-4" />
 114 │ │               Save Invoice
 115 │ │             </Button>
 116 │ │           </div>
 117 │ │         </div>
 118 │ │   
 119 │ │         <Form {...form}>
 120 │ │           <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
 121 │ │             <Card>
 122 │ │               <CardHeader>
 123 │ │                 <CardTitle>Invoice Details</CardTitle>
 124 │ │               </CardHeader>
 125 │ │               <CardContent className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 126 │ │                 <FormField
 127 │ │                   control={form.control}
 128 │ │                   name="invoiceType"
 129 │ │                   render={({ field }) => (
 130 │ │                     <FormItem>
 131 │ │                       <FormLabel>Invoice Type</FormLabel>
 132 │ │                       <Select
 133 │ │                         onValueChange={field.onChange}
 134 │ │                         defaultValue={field.value}
 135 │ │                       >
 136 │ │                         <FormControl>
 137 │ │                           <SelectTrigger>
 138 │ │                             <SelectValue placeholder="Select type" />
 139 │ │                           </SelectTrigger>
 140 │ │                         </FormControl>
 141 │ │                         <SelectContent>
 142 │ │                           <SelectItem value="retail">Retail</SelectItem>
 143 │ │                           <SelectItem value="wholesale">Wholesale</SelectItem>
 144 │ │                         </SelectContent>
 145 │ │                       </Select>
 146 │ │                       <FormMessage />
 147 │ │                     </FormItem>
 148 │ │                   )}
 149 │ │                 />
 150 │ │   
 151 │ │                 <FormField
 152 │ │                   control={form.control}
 153 │ │                   name="storeId"
 154 │ │                   render={({ field }) => (
 155 │ │                     <FormItem>
 156 │ │                       <FormLabel>Store</FormLabel>
 157 │ │                       <StoreSelect
 158 │ │                         value={field.value}
 159 │ │                         onChange={field.onChange}
 160 │ │                         disabled={user?.role !== "super_admin"}
 161 │ │                       />
 162 │ │                       <FormMessage />
 163 │ │                     </FormItem>
 164 │ │                   )}
 165 │ │                 />
 166 │ │   
 167 │ │                 <FormField
 168 │ │                   control={form.control}
 169 │ │                   name="customerId"
 170 │ │                   render={({ field }) => (
 171 │ │                     <FormItem>
 172 │ │                       <FormLabel>Customer</FormLabel>
 173 │ │                       <CustomerSelect
 174 │ │                         value={field.value}
 175 │ │                         onChange={field.onChange}
 176 │ │                       />
 177 │ │                       <FormMessage />
 178 │ │                     </FormItem>
 179 │ │                   )}
 180 │ │                 />
 181 │ │   
 182 │ │                 <FormField
 183 │ │                   control={form.control}
 184 │ │                   name="paymentMode"
 185 │ │                   render={({ field }) => (
 186 │ │                     <FormItem>
 187 │ │                       <FormLabel>Payment Mode</FormLabel>
 188 │ │                       <Select
 189 │ │                         onValueChange={field.onChange}
 190 │ │                         defaultValue={field.value}
 191 │ │                       >
 192 │ │                         <FormControl>
 193 │ │                           <SelectTrigger>
 194 │ │                             <SelectValue placeholder="Select payment mode" />
 195 │ │                           </SelectTrigger>
 196 │ │                         </FormControl>
 197 │ │                         <SelectContent>
 198 │ │                           <SelectItem value="cash">Cash</SelectItem>
 199 │ │                           <SelectItem value="upi">UPI</SelectItem>
 200 │ │                           <SelectItem value="card">Card</SelectItem>
 201 │ │                           <SelectItem value="credit">Credit</SelectItem>
 202 │ │                         </SelectContent>
 203 │ │                       </Select>
 204 │ │                       <FormMessage />
 205 │ │                     </FormItem>
 206 │ │                   )}
 207 │ │                 />
 208 │ │   
 209 │ │                 <FormField
 210 │ │                   control={form.control}
 211 │ │                   name="note"
 212 │ │                   render={({ field }) => (
 213 │ │                     <FormItem className="col-span-full">
 214 │ │                       <FormLabel>Note</FormLabel>
 215 │ │                       <FormControl>
 216 │ │                         <Input {...field} placeholder="Add note (optional)" />
 217 │ │                       </FormControl>
 218 │ │                       <FormMessage />
 219 │ │                     </FormItem>
 220 │ │                   )}
 221 │ │                 />
 222 │ │               </CardContent>
 223 │ │             </Card>
 224 │ │   
 225 │ │             <ProductTable items={items} setItems={setItems} />
 226 │ │             <InvoiceSummary items={items} />
 227 │ │           </form>
 228 │ │         </Form>
 229 │ │       </div>
 230 │ │     );
 231 │ ├─▶ }
     · ╰──── previous exported here
 232 │     "use client";
 233 │     
 234 │     import { useState } from "react";
 235 │     import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 236 │     import { Input } from "@/components/ui/input";
 237 │     import { Button } from "@/components/ui/button";
 238 │     import { CustomerSelect } from "@/components/billing/customer-select";
 239 │     import { ProductTable } from "@/components/billing/product-table";
 240 │     import { StoreSelect } from "@/components/billing/store-select";
 241 │     import { QrCode, Save, Printer } from "lucide-react";
 242 │     import QRCode from 'qrcode.react';
 243 │     
 244 │ ╭─▶ export default function CreateInvoicePage() {
 245 │ │     const [invoice, setInvoice] = useState({
 246 │ │       customerId: "",
 247 │ │       storeId: "",
 248 │ │       items: [],
 249 │ │       notes: "",
 250 │ │     });
 251 │ │   
 252 │ │     const generateQR = (invoiceId) => {
 253 │ │       return `https://your-domain.com/verify-invoice/${invoiceId}`;
 254 │ │     };
 255 │ │   
 256 │ │     return (
 257 │ │       <div className="flex flex-col gap-6 p-6">
 258 │ │         <div className="flex justify-between items-center">
 259 │ │           <h1 className="text-3xl font-bold">Create New Invoice</h1>
 260 │ │           <div className="flex gap-2">
 261 │ │             <Button variant="outline">
 262 │ │               <Printer className="w-4 h-4 mr-2" />
 263 │ │               Print Preview
 264 │ │             </Button>
 265 │ │             <Button>
 266 │ │               <Save className="w-4 h-4 mr-2" />
 267 │ │               Save Invoice
 268 │ │             </Button>
 269 │ │           </div>
 270 │ │         </div>
 271 │ │   
 272 │ │         <div className="grid grid-cols-3 gap-6">
 273 │ │           <Card>
 274 │ │             <CardHeader>
 275 │ │               <CardTitle>Basic Information</CardTitle>
 276 │ │             </CardHeader>
 277 │ │             <CardContent className="space-y-4">
 278 │ │               <div>
 279 │ │                 <label className="text-sm font-medium">Store</label>
 280 │ │                 <StoreSelect
 281 │ │                   value={invoice.storeId}
 282 │ │                   onChange={(value) => setInvoice({ ...invoice, storeId: value })}
 283 │ │                 />
 284 │ │               </div>
 285 │ │               <div>
 286 │ │                 <label className="text-sm font-medium">Customer</label>
 287 │ │                 <CustomerSelect
 288 │ │                   value={invoice.customerId}
 289 │ │                   onChange={(value) => setInvoice({ ...invoice, customerId: value })}
 290 │ │                 />
 291 │ │               </div>
 292 │ │             </CardContent>
 293 │ │           </Card>
 294 │ │   
 295 │ │           <Card className="col-span-2">
 296 │ │             <CardHeader>
 297 │ │               <CardTitle>Items</CardTitle>
 298 │ │             </CardHeader>
 299 │ │             <CardContent>
 300 │ │               <ProductTable
 301 │ │                 items={invoice.items}
 302 │ │                 onChange={(items) => setInvoice({ ...invoice, items })}
 303 │ │               />
 304 │ │             </CardContent>
 305 │ │           </Card>
 306 │ │         </div>
 307 │ │       </div>
 308 │ │     );
 309 │ ├─▶ }
     · ╰──── exported more than once
     ╰────

Error: 
  ☞ Exported identifiers must be unique

  × The "use client" directive must be placed before other expressions. Move it to the top of the file to resolve this issue.
     ╭─[/home/runner/workspace/app/(billing)/create-invoice/page.tsx:229:1]
 229 │     </div>
 230 │   );
 231 │ }
 232 │ "use client";
     · ─────────────
 233 │ 
 234 │ import { useState } from "react";
 235 │ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     ╰────
This error occurred during the build process and can only be dismissed by fixing the error.